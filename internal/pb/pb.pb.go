// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: pb.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Main analysis result container
type BurndownAnalysisResults struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Project           *CompressedSparseRowMatrix `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Files             *CompressedSparseRowMatrix `protobuf:"bytes,2,opt,name=files,proto3" json:"files,omitempty"`
	People            *CompressedSparseRowMatrix `protobuf:"bytes,3,opt,name=people,proto3" json:"people,omitempty"`
	PeopleInteraction *CompressedSparseRowMatrix `protobuf:"bytes,4,opt,name=people_interaction,json=peopleInteraction,proto3" json:"people_interaction,omitempty"`
	FilesOwnership    *FilesOwnership            `protobuf:"bytes,5,opt,name=files_ownership,json=filesOwnership,proto3" json:"files_ownership,omitempty"`
	TickSize          int32                      `protobuf:"varint,6,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BurndownAnalysisResults) Reset() {
	*x = BurndownAnalysisResults{}
	mi := &file_pb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurndownAnalysisResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurndownAnalysisResults) ProtoMessage() {}

func (x *BurndownAnalysisResults) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurndownAnalysisResults.ProtoReflect.Descriptor instead.
func (*BurndownAnalysisResults) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{0}
}

func (x *BurndownAnalysisResults) GetProject() *CompressedSparseRowMatrix {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *BurndownAnalysisResults) GetFiles() *CompressedSparseRowMatrix {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *BurndownAnalysisResults) GetPeople() *CompressedSparseRowMatrix {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *BurndownAnalysisResults) GetPeopleInteraction() *CompressedSparseRowMatrix {
	if x != nil {
		return x.PeopleInteraction
	}
	return nil
}

func (x *BurndownAnalysisResults) GetFilesOwnership() *FilesOwnership {
	if x != nil {
		return x.FilesOwnership
	}
	return nil
}

func (x *BurndownAnalysisResults) GetTickSize() int32 {
	if x != nil {
		return x.TickSize
	}
	return 0
}

// Efficient sparse matrix representation using Compressed Sparse Row format
type CompressedSparseRowMatrix struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NumberOfRows    int32                  `protobuf:"varint,1,opt,name=number_of_rows,json=numberOfRows,proto3" json:"number_of_rows,omitempty"`
	NumberOfColumns int32                  `protobuf:"varint,2,opt,name=number_of_columns,json=numberOfColumns,proto3" json:"number_of_columns,omitempty"`
	Data            []int64                `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
	Indices         []int32                `protobuf:"varint,4,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Indptr          []int64                `protobuf:"varint,5,rep,packed,name=indptr,proto3" json:"indptr,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CompressedSparseRowMatrix) Reset() {
	*x = CompressedSparseRowMatrix{}
	mi := &file_pb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressedSparseRowMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedSparseRowMatrix) ProtoMessage() {}

func (x *CompressedSparseRowMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedSparseRowMatrix.ProtoReflect.Descriptor instead.
func (*CompressedSparseRowMatrix) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{1}
}

func (x *CompressedSparseRowMatrix) GetNumberOfRows() int32 {
	if x != nil {
		return x.NumberOfRows
	}
	return 0
}

func (x *CompressedSparseRowMatrix) GetNumberOfColumns() int32 {
	if x != nil {
		return x.NumberOfColumns
	}
	return 0
}

func (x *CompressedSparseRowMatrix) GetData() []int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CompressedSparseRowMatrix) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *CompressedSparseRowMatrix) GetIndptr() []int64 {
	if x != nil {
		return x.Indptr
	}
	return nil
}

// File ownership data mapping file paths to developer indices
type FilesOwnership struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         map[string]int32       `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesOwnership) Reset() {
	*x = FilesOwnership{}
	mi := &file_pb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesOwnership) ProtoMessage() {}

func (x *FilesOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesOwnership.ProtoReflect.Descriptor instead.
func (*FilesOwnership) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{2}
}

func (x *FilesOwnership) GetValue() map[string]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Repository metadata
type Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       int32                  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Repository    string                 `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	BeginUnixTime int64                  `protobuf:"varint,4,opt,name=begin_unix_time,json=beginUnixTime,proto3" json:"begin_unix_time,omitempty"`
	EndUnixTime   int64                  `protobuf:"varint,5,opt,name=end_unix_time,json=endUnixTime,proto3" json:"end_unix_time,omitempty"`
	Commits       int32                  `protobuf:"varint,6,opt,name=commits,proto3" json:"commits,omitempty"`
	RunTime       int64                  `protobuf:"varint,7,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_pb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Metadata) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Metadata) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Metadata) GetBeginUnixTime() int64 {
	if x != nil {
		return x.BeginUnixTime
	}
	return 0
}

func (x *Metadata) GetEndUnixTime() int64 {
	if x != nil {
		return x.EndUnixTime
	}
	return 0
}

func (x *Metadata) GetCommits() int32 {
	if x != nil {
		return x.Commits
	}
	return 0
}

func (x *Metadata) GetRunTime() int64 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

// File coupling analysis results
type CouplesAnalysisResults struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	FileCouples   *CompressedSparseRowMatrix `protobuf:"bytes,1,opt,name=file_couples,json=fileCouples,proto3" json:"file_couples,omitempty"`
	FileNames     []string                   `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouplesAnalysisResults) Reset() {
	*x = CouplesAnalysisResults{}
	mi := &file_pb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouplesAnalysisResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouplesAnalysisResults) ProtoMessage() {}

func (x *CouplesAnalysisResults) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouplesAnalysisResults.ProtoReflect.Descriptor instead.
func (*CouplesAnalysisResults) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{4}
}

func (x *CouplesAnalysisResults) GetFileCouples() *CompressedSparseRowMatrix {
	if x != nil {
		return x.FileCouples
	}
	return nil
}

func (x *CouplesAnalysisResults) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

// Developer statistics
type DeveloperStat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Commits       int32                  `protobuf:"varint,2,opt,name=commits,proto3" json:"commits,omitempty"`
	LinesAdded    int64                  `protobuf:"varint,3,opt,name=lines_added,json=linesAdded,proto3" json:"lines_added,omitempty"`
	LinesRemoved  int64                  `protobuf:"varint,4,opt,name=lines_removed,json=linesRemoved,proto3" json:"lines_removed,omitempty"`
	LinesModified int64                  `protobuf:"varint,5,opt,name=lines_modified,json=linesModified,proto3" json:"lines_modified,omitempty"`
	FilesTouched  int32                  `protobuf:"varint,6,opt,name=files_touched,json=filesTouched,proto3" json:"files_touched,omitempty"`
	Languages     map[string]int32       `protobuf:"bytes,7,rep,name=languages,proto3" json:"languages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeveloperStat) Reset() {
	*x = DeveloperStat{}
	mi := &file_pb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeveloperStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeveloperStat) ProtoMessage() {}

func (x *DeveloperStat) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeveloperStat.ProtoReflect.Descriptor instead.
func (*DeveloperStat) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{5}
}

func (x *DeveloperStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeveloperStat) GetCommits() int32 {
	if x != nil {
		return x.Commits
	}
	return 0
}

func (x *DeveloperStat) GetLinesAdded() int64 {
	if x != nil {
		return x.LinesAdded
	}
	return 0
}

func (x *DeveloperStat) GetLinesRemoved() int64 {
	if x != nil {
		return x.LinesRemoved
	}
	return 0
}

func (x *DeveloperStat) GetLinesModified() int64 {
	if x != nil {
		return x.LinesModified
	}
	return 0
}

func (x *DeveloperStat) GetFilesTouched() int32 {
	if x != nil {
		return x.FilesTouched
	}
	return 0
}

func (x *DeveloperStat) GetLanguages() map[string]int32 {
	if x != nil {
		return x.Languages
	}
	return nil
}

// Language statistics
type LanguageStat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      string                 `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Lines         int64                  `protobuf:"varint,2,opt,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageStat) Reset() {
	*x = LanguageStat{}
	mi := &file_pb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageStat) ProtoMessage() {}

func (x *LanguageStat) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageStat.ProtoReflect.Descriptor instead.
func (*LanguageStat) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{6}
}

func (x *LanguageStat) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *LanguageStat) GetLines() int64 {
	if x != nil {
		return x.Lines
	}
	return 0
}

// Shotness record for tracking structural unit modifications
type ShotnessRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                                                                     // Type of structural unit (e.g., "function", "class")
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                     // Name of the structural unit
	File          string                 `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`                                                                                     // File path containing the unit
	Counters      map[int32]int32        `protobuf:"bytes,4,rep,name=counters,proto3" json:"counters,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Time-based modification counters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShotnessRecord) Reset() {
	*x = ShotnessRecord{}
	mi := &file_pb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShotnessRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShotnessRecord) ProtoMessage() {}

func (x *ShotnessRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShotnessRecord.ProtoReflect.Descriptor instead.
func (*ShotnessRecord) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{7}
}

func (x *ShotnessRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShotnessRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShotnessRecord) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ShotnessRecord) GetCounters() map[int32]int32 {
	if x != nil {
		return x.Counters
	}
	return nil
}

// Shotness analysis results
type ShotnessAnalysisResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*ShotnessRecord      `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"` // Collection of all shotness records
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShotnessAnalysisResults) Reset() {
	*x = ShotnessAnalysisResults{}
	mi := &file_pb_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShotnessAnalysisResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShotnessAnalysisResults) ProtoMessage() {}

func (x *ShotnessAnalysisResults) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShotnessAnalysisResults.ProtoReflect.Descriptor instead.
func (*ShotnessAnalysisResults) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{8}
}

func (x *ShotnessAnalysisResults) GetRecords() []*ShotnessRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// Comprehensive analysis results that can contain multiple analysis types
type AnalysisResults struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Metadata       *Metadata                `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Burndown       *BurndownAnalysisResults `protobuf:"bytes,2,opt,name=burndown,proto3" json:"burndown,omitempty"`
	Couples        *CouplesAnalysisResults  `protobuf:"bytes,3,opt,name=couples,proto3" json:"couples,omitempty"`
	DeveloperStats []*DeveloperStat         `protobuf:"bytes,4,rep,name=developer_stats,json=developerStats,proto3" json:"developer_stats,omitempty"`
	LanguageStats  []*LanguageStat          `protobuf:"bytes,5,rep,name=language_stats,json=languageStats,proto3" json:"language_stats,omitempty"`
	PeopleNames    []string                 `protobuf:"bytes,6,rep,name=people_names,json=peopleNames,proto3" json:"people_names,omitempty"`
	FileNames      []string                 `protobuf:"bytes,7,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	Shotness       *ShotnessAnalysisResults `protobuf:"bytes,8,opt,name=shotness,proto3" json:"shotness,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnalysisResults) Reset() {
	*x = AnalysisResults{}
	mi := &file_pb_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisResults) ProtoMessage() {}

func (x *AnalysisResults) ProtoReflect() protoreflect.Message {
	mi := &file_pb_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisResults.ProtoReflect.Descriptor instead.
func (*AnalysisResults) Descriptor() ([]byte, []int) {
	return file_pb_proto_rawDescGZIP(), []int{9}
}

func (x *AnalysisResults) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AnalysisResults) GetBurndown() *BurndownAnalysisResults {
	if x != nil {
		return x.Burndown
	}
	return nil
}

func (x *AnalysisResults) GetCouples() *CouplesAnalysisResults {
	if x != nil {
		return x.Couples
	}
	return nil
}

func (x *AnalysisResults) GetDeveloperStats() []*DeveloperStat {
	if x != nil {
		return x.DeveloperStats
	}
	return nil
}

func (x *AnalysisResults) GetLanguageStats() []*LanguageStat {
	if x != nil {
		return x.LanguageStats
	}
	return nil
}

func (x *AnalysisResults) GetPeopleNames() []string {
	if x != nil {
		return x.PeopleNames
	}
	return nil
}

func (x *AnalysisResults) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *AnalysisResults) GetShotness() *ShotnessAnalysisResults {
	if x != nil {
		return x.Shotness
	}
	return nil
}

var File_pb_proto protoreflect.FileDescriptor

const file_pb_proto_rawDesc = "" +
	"\n" +
	"\bpb.proto\x12\x02pb\"\xe6\x02\n" +
	"\x17BurndownAnalysisResults\x127\n" +
	"\aproject\x18\x01 \x01(\v2\x1d.pb.CompressedSparseRowMatrixR\aproject\x123\n" +
	"\x05files\x18\x02 \x01(\v2\x1d.pb.CompressedSparseRowMatrixR\x05files\x125\n" +
	"\x06people\x18\x03 \x01(\v2\x1d.pb.CompressedSparseRowMatrixR\x06people\x12L\n" +
	"\x12people_interaction\x18\x04 \x01(\v2\x1d.pb.CompressedSparseRowMatrixR\x11peopleInteraction\x12;\n" +
	"\x0ffiles_ownership\x18\x05 \x01(\v2\x12.pb.FilesOwnershipR\x0efilesOwnership\x12\x1b\n" +
	"\ttick_size\x18\x06 \x01(\x05R\btickSize\"\xb3\x01\n" +
	"\x19CompressedSparseRowMatrix\x12$\n" +
	"\x0enumber_of_rows\x18\x01 \x01(\x05R\fnumberOfRows\x12*\n" +
	"\x11number_of_columns\x18\x02 \x01(\x05R\x0fnumberOfColumns\x12\x12\n" +
	"\x04data\x18\x03 \x03(\x03R\x04data\x12\x18\n" +
	"\aindices\x18\x04 \x03(\x05R\aindices\x12\x16\n" +
	"\x06indptr\x18\x05 \x03(\x03R\x06indptr\"\x7f\n" +
	"\x0eFilesOwnership\x123\n" +
	"\x05value\x18\x01 \x03(\v2\x1d.pb.FilesOwnership.ValueEntryR\x05value\x1a8\n" +
	"\n" +
	"ValueEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd9\x01\n" +
	"\bMetadata\x12\x18\n" +
	"\aversion\x18\x01 \x01(\x05R\aversion\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12\x1e\n" +
	"\n" +
	"repository\x18\x03 \x01(\tR\n" +
	"repository\x12&\n" +
	"\x0fbegin_unix_time\x18\x04 \x01(\x03R\rbeginUnixTime\x12\"\n" +
	"\rend_unix_time\x18\x05 \x01(\x03R\vendUnixTime\x12\x18\n" +
	"\acommits\x18\x06 \x01(\x05R\acommits\x12\x19\n" +
	"\brun_time\x18\a \x01(\x03R\arunTime\"y\n" +
	"\x16CouplesAnalysisResults\x12@\n" +
	"\ffile_couples\x18\x01 \x01(\v2\x1d.pb.CompressedSparseRowMatrixR\vfileCouples\x12\x1d\n" +
	"\n" +
	"file_names\x18\x02 \x03(\tR\tfileNames\"\xcd\x02\n" +
	"\rDeveloperStat\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acommits\x18\x02 \x01(\x05R\acommits\x12\x1f\n" +
	"\vlines_added\x18\x03 \x01(\x03R\n" +
	"linesAdded\x12#\n" +
	"\rlines_removed\x18\x04 \x01(\x03R\flinesRemoved\x12%\n" +
	"\x0elines_modified\x18\x05 \x01(\x03R\rlinesModified\x12#\n" +
	"\rfiles_touched\x18\x06 \x01(\x05R\ffilesTouched\x12>\n" +
	"\tlanguages\x18\a \x03(\v2 .pb.DeveloperStat.LanguagesEntryR\tlanguages\x1a<\n" +
	"\x0eLanguagesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"@\n" +
	"\fLanguageStat\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\x12\x14\n" +
	"\x05lines\x18\x02 \x01(\x03R\x05lines\"\xc7\x01\n" +
	"\x0eShotnessRecord\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04file\x18\x03 \x01(\tR\x04file\x12<\n" +
	"\bcounters\x18\x04 \x03(\v2 .pb.ShotnessRecord.CountersEntryR\bcounters\x1a;\n" +
	"\rCountersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"G\n" +
	"\x17ShotnessAnalysisResults\x12,\n" +
	"\arecords\x18\x01 \x03(\v2\x12.pb.ShotnessRecordR\arecords\"\x9a\x03\n" +
	"\x0fAnalysisResults\x12(\n" +
	"\bmetadata\x18\x01 \x01(\v2\f.pb.MetadataR\bmetadata\x127\n" +
	"\bburndown\x18\x02 \x01(\v2\x1b.pb.BurndownAnalysisResultsR\bburndown\x124\n" +
	"\acouples\x18\x03 \x01(\v2\x1a.pb.CouplesAnalysisResultsR\acouples\x12:\n" +
	"\x0fdeveloper_stats\x18\x04 \x03(\v2\x11.pb.DeveloperStatR\x0edeveloperStats\x127\n" +
	"\x0elanguage_stats\x18\x05 \x03(\v2\x10.pb.LanguageStatR\rlanguageStats\x12!\n" +
	"\fpeople_names\x18\x06 \x03(\tR\vpeopleNames\x12\x1d\n" +
	"\n" +
	"file_names\x18\a \x03(\tR\tfileNames\x127\n" +
	"\bshotness\x18\b \x01(\v2\x1b.pb.ShotnessAnalysisResultsR\bshotnessB\x18Z\x16labours-go/internal/pbb\x06proto3"

var (
	file_pb_proto_rawDescOnce sync.Once
	file_pb_proto_rawDescData []byte
)

func file_pb_proto_rawDescGZIP() []byte {
	file_pb_proto_rawDescOnce.Do(func() {
		file_pb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_proto_rawDesc), len(file_pb_proto_rawDesc)))
	})
	return file_pb_proto_rawDescData
}

var file_pb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pb_proto_goTypes = []any{
	(*BurndownAnalysisResults)(nil),   // 0: pb.BurndownAnalysisResults
	(*CompressedSparseRowMatrix)(nil), // 1: pb.CompressedSparseRowMatrix
	(*FilesOwnership)(nil),            // 2: pb.FilesOwnership
	(*Metadata)(nil),                  // 3: pb.Metadata
	(*CouplesAnalysisResults)(nil),    // 4: pb.CouplesAnalysisResults
	(*DeveloperStat)(nil),             // 5: pb.DeveloperStat
	(*LanguageStat)(nil),              // 6: pb.LanguageStat
	(*ShotnessRecord)(nil),            // 7: pb.ShotnessRecord
	(*ShotnessAnalysisResults)(nil),   // 8: pb.ShotnessAnalysisResults
	(*AnalysisResults)(nil),           // 9: pb.AnalysisResults
	nil,                               // 10: pb.FilesOwnership.ValueEntry
	nil,                               // 11: pb.DeveloperStat.LanguagesEntry
	nil,                               // 12: pb.ShotnessRecord.CountersEntry
}
var file_pb_proto_depIdxs = []int32{
	1,  // 0: pb.BurndownAnalysisResults.project:type_name -> pb.CompressedSparseRowMatrix
	1,  // 1: pb.BurndownAnalysisResults.files:type_name -> pb.CompressedSparseRowMatrix
	1,  // 2: pb.BurndownAnalysisResults.people:type_name -> pb.CompressedSparseRowMatrix
	1,  // 3: pb.BurndownAnalysisResults.people_interaction:type_name -> pb.CompressedSparseRowMatrix
	2,  // 4: pb.BurndownAnalysisResults.files_ownership:type_name -> pb.FilesOwnership
	10, // 5: pb.FilesOwnership.value:type_name -> pb.FilesOwnership.ValueEntry
	1,  // 6: pb.CouplesAnalysisResults.file_couples:type_name -> pb.CompressedSparseRowMatrix
	11, // 7: pb.DeveloperStat.languages:type_name -> pb.DeveloperStat.LanguagesEntry
	12, // 8: pb.ShotnessRecord.counters:type_name -> pb.ShotnessRecord.CountersEntry
	7,  // 9: pb.ShotnessAnalysisResults.records:type_name -> pb.ShotnessRecord
	3,  // 10: pb.AnalysisResults.metadata:type_name -> pb.Metadata
	0,  // 11: pb.AnalysisResults.burndown:type_name -> pb.BurndownAnalysisResults
	4,  // 12: pb.AnalysisResults.couples:type_name -> pb.CouplesAnalysisResults
	5,  // 13: pb.AnalysisResults.developer_stats:type_name -> pb.DeveloperStat
	6,  // 14: pb.AnalysisResults.language_stats:type_name -> pb.LanguageStat
	8,  // 15: pb.AnalysisResults.shotness:type_name -> pb.ShotnessAnalysisResults
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pb_proto_init() }
func file_pb_proto_init() {
	if File_pb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_proto_rawDesc), len(file_pb_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_proto_goTypes,
		DependencyIndexes: file_pb_proto_depIdxs,
		MessageInfos:      file_pb_proto_msgTypes,
	}.Build()
	File_pb_proto = out.File
	file_pb_proto_goTypes = nil
	file_pb_proto_depIdxs = nil
}
